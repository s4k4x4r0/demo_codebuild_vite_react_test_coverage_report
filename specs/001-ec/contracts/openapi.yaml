openapi: 3.0.3
info:
  title: Product Listing API (Mock Contract)
  version: 0.1.0
  description: |
    商品一覧取得用の将来 API 契約。現フェーズでは MSW によるモックのみ。
servers:
  - url: https://api.example.com
paths:
  /products:
    get:
      summary: 商品一覧の取得（検索/フィルター/ソート/ページング）
      parameters:
        - name: q
          in: query
          schema: { type: string }
          description: 商品名の部分一致（正規化なし）
        - name: inStockOnly
          in: query
          schema: { type: boolean }
          description: 在庫あり（stock>0 かつ 販売中）
        - name: saleStatus
          in: query
          schema:
            type: string
            enum: [on_sale, stopped]
          description: 販売状態フィルター
        - name: priceMin
          in: query
          schema: { type: number, minimum: 0 }
        - name: priceMax
          in: query
          schema: { type: number, minimum: 0 }
        - name: sort
          in: query
          schema:
            type: string
            enum: [popularity_desc, price_asc, price_desc, rating_desc]
          description: デフォルトは popularity_desc
        - name: page
          in: query
          schema: { type: integer, minimum: 1, default: 1 }
        - name: pageSize
          in: query
          schema: { type: integer, minimum: 1, maximum: 50, default: 10 }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductListResponse"
components:
  schemas:
    Product:
      type: object
      required:
        [
          id,
          name,
          priceJpy,
          stock,
          saleStatus,
          popularity,
          reviewAverage,
          reviewCount,
        ]
      properties:
        id: { type: string }
        name: { type: string }
        description: { type: string }
        priceJpy: { type: number, minimum: 0 }
        stock: { type: integer, minimum: 0 }
        imageUrl: { type: string, nullable: true }
        saleStatus:
          type: string
          enum: [on_sale, stopped]
        popularity: { type: integer, minimum: 1 }
        reviewAverage: { type: number, minimum: 0, maximum: 5 }
        reviewCount: { type: integer, minimum: 0 }
    ProductListResponse:
      type: object
      required: [items, page, pageSize, total]
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Product"
        page: { type: integer, minimum: 1 }
        pageSize: { type: integer, minimum: 1 }
        total: { type: integer, minimum: 0 }
